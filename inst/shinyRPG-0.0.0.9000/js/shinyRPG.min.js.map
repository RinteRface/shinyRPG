{"version":3,"sources":["input-button.js","input-slider.js","progress.js"],"names":["button","Shiny","InputBinding","$","extend","find","scope","getValue","el","parseInt","val","subscribe","callback","self","this","on","e","currentVal","unsubscribe","off","inputBindings","register","slider","initialize","RPGUI","create","get_value","setValue","value","set_value","receiveMessage","data","trigger","each","$el","config","document","attr","JSON","parse","html","addCustomMessageHandler","message","id","hasOwnProperty"],"mappings":"AAAA,IAAIA,OAAS,IAAIC,MAAMC,aACvBC,EAAEC,OAAOJ,OAAQ,CACfK,KAAM,SAASC,GACb,OAAOH,EAAEG,GAAOD,KAAK,kBAEvBE,SAAU,SAASC,GACjB,OAAOC,SAASN,EAAEK,GAAIE,QAAU,GAElCC,UAAW,SAASH,EAAII,GACtBC,KAAOC,KACPX,EAAEK,GAAIO,GAAG,gBAAgB,SAASC,GAChC,IAAIC,EAAaJ,KAAKN,SAASC,GAC/BL,EAAEK,GAAIE,IAAIO,EAAa,GACvBL,QAGJM,YAAa,SAASV,GACpBL,EAAEK,GAAIW,IAAI,cAGdlB,MAAMmB,cAAcC,SAASrB,OAAQ,mBCpBrC,IAAIsB,OAAS,IAAIrB,MAAMC,aACvBC,EAAEC,OAAOkB,OAAQ,CACfjB,KAAM,SAASC,GACb,OAAOH,EAAEG,GAAOD,KAAK,kBAEvBkB,WAAY,SAASf,GACnBgB,MAAMC,OAAOjB,EAAI,WAEnBD,SAAU,SAASC,GACjB,OAAOC,SAASe,MAAME,UAAUlB,KAElCmB,SAAU,SAASnB,EAAIoB,GACrBJ,MAAMK,UAAUrB,EAAIoB,IAEtBE,eAAgB,SAAStB,EAAIuB,GAC3BjB,KAAKa,SAASnB,EAAIuB,GAClB5B,EAAEK,GAAIwB,QAAQ,WAEhBrB,UAAW,SAASH,EAAII,GACtBT,EAAEK,GAAIO,GAAG,iBAAiB,SAASC,GACjCJ,QAIJM,YAAa,SAASV,GACpBL,EAAEK,GAAIW,IAAI,cAGdlB,MAAMmB,cAAcC,SAASC,OAAQ,mBC5BrCnB,GAAE,WAGAA,EAAE,mBAAmB8B,MAAK,WACxB,IAAIC,EAAM/B,EAAEW,MACRqB,EAAShC,EAAEiC,UAAU/B,KACvB,oBAAsB6B,EAAIG,KAAK,MAAQ,MAEzCF,EAASG,KAAKC,MAAMJ,EAAOK,QAC3BhB,MAAMK,UAAUK,EAAK,OAIvBjC,MAAMwC,wBAAwB,mBAAmB,SAASC,GACxD,IAAIR,EAAM/B,EAAE,IAAIuC,EAAQC,MAEpBD,EAAQE,eAAe,UACzBpB,MAAMK,UAAUK,EAAK","file":"shinyRPG.min.js","sourceRoot":"../../shinyRPG-build","sourcesContent":["var button = new Shiny.InputBinding();\n$.extend(button, {\n  find: function(scope) {\n    return $(scope).find('.rpgui-button')\n  },\n  getValue: function(el) {\n    return parseInt($(el).val()) || 0;\n  },\n  subscribe: function(el, callback) {\n    self = this;\n    $(el).on('click.button', function(e) {\n      var currentVal = self.getValue(el);\n      $(el).val(currentVal + 1);\n      callback();\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.button');\n  }\n});\nShiny.inputBindings.register(button, 'shinyRPG.button');","var slider = new Shiny.InputBinding();\n$.extend(slider, {\n  find: function(scope) {\n    return $(scope).find('.rpgui-slider');\n  },\n  initialize: function(el) {\n    RPGUI.create(el, \"slider\");\n  },\n  getValue: function(el) {\n    return parseInt(RPGUI.get_value(el));\n  },\n  setValue: function(el, value) {\n    RPGUI.set_value(el, value);\n  },\n  receiveMessage: function(el, data) {\n    this.setValue(el, data);\n    $(el).trigger('change');\n  },\n  subscribe: function(el, callback) {\n    $(el).on('change.slider', function(e) {\n      callback();\n    });\n\n  },\n  unsubscribe: function(el) {\n    $(el).off('.slider');\n  }\n});\nShiny.inputBindings.register(slider, 'shinyRPG.slider');","$(function() {\n\n  // Initialize all progress bars\n  $(\".rpgui-progress\").each(function() {\n    var $el = $(this);\n    var config = $(document).find(\n      \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n    );\n    config = JSON.parse(config.html());\n    RPGUI.set_value($el, 0.5);\n  });\n\n  // Update progress bar\n  Shiny.addCustomMessageHandler('update-progress', function(message) {\n    let $el = $(`#${message.id}`);\n    // update value\n    if (message.hasOwnProperty(\"value\")) {\n      RPGUI.set_value($el, 0.5);\n    }\n  });\n});"]}
